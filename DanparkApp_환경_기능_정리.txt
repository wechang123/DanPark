### 개요
- **플랫폼/프레임워크**: Expo 54 기반 React Native 앱, Expo Router로 파일 시스템 라우팅, New Architecture 활성화(Fabric/TurboModules).
- **핵심 기능**: 캠퍼스 주차장 검색/정렬/즐겨찾기, 상세 하단시트, 주차 시작/반납 목업, 마이페이지/설정/공지/고객센터/통계/기록 화면.

### 개발 환경
- **런타임/라이브러리**
  - **Expo**: 54.0.10, **Expo Router**: 6.0.8, **React**: 19.1.0, **React Native**: 0.81.4
  - **Reanimated**: 4.1.1, **Gesture Handler**: 2.28.0, **Screens**: 4.16.0, **Safe Area**: 5.6.0
  - **Bottom Sheet**: @gorhom/bottom-sheet 5.2.6
  - **Maps**: react-native-maps 1.20.1 (현재 메인 화면은 지도 UI 목업으로 구현)
  - **Expo 모듈**: status-bar, image, fonts, haptics, linking, system-ui, web-browser, constants, symbols
- **번들/트랜스파일**
  - Babel: `babel-preset-expo` + `react-native-reanimated/plugin`
- **타입스크립트**
  - Strict 모드, 경로 별칭 `@/*` 루트 매핑
- **Lint**
  - ESLint 9 + `eslint-config-expo/flat`
- **앱 설정(app.json)**
  - iOS 태블릿 지원, Android adaptive icon/edge-to-edge, 웹 정적 출력
  - 실험: `typedRoutes: true`, `reactCompiler: true`
  - New Architecture 활성화: `newArchEnabled: true`

```5:12:/Users/k.j.o/Danpark_final 3/DanparkApp/package.json
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "lint": "expo lint"
  },
```

```43:46:/Users/k.j.o/Danpark_final 3/DanparkApp/app.json
    "experiments": {
      "typedRoutes": true,
      "reactCompiler": true
    }
```

```3:10:/Users/k.j.o/Danpark_final 3/DanparkApp/tsconfig.json
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
```

### 프로젝트 구조/라우팅
- **파일 시스템 라우팅(Expo Router)**
  - 루트 스택: `app/_layout.tsx` → 초기 라우트 `'(tabs)'`
  - 탭: `app/(tabs)/_layout.tsx` → `index`(홈), `favorites`, `mypage`
  - 인증: `app/(auth)/login.tsx` (로그인 화면)
  - 독립 스택 화면: `settings`, `parking-history`, `parking-stats`, `support`, `notice`, `terms`, `privacy`, `modal`
- **상태/테마 Provider 주입**
  - 루트에서 `ThemeProvider` + `@react-navigation/native` 테마, 탭 루트에서 `ParkingLotProvider`

```15:19:/Users/k.j.o/Danpark_final 3/DanparkApp/app/_layout.tsx
export const unstable_settings = {
    initialRouteName: '(tabs)',
};
```

### 전역 상태/도메인 모델
- **`types.ts`**
  - `ParkingLot` 모델: 위치/혼잡도/거리/즐겨찾기/주차상태/자리번호/시작시간 등
  - `SortOption` 유니온 타입: '거리순' | '혼잡도순' | '빈자리순' | '이름순'
- **`ParkingLotContext`**
  - 목업 데이터 10개, 전역 상태로 주차장 목록/즐겨찾기/주차상태 관리
  - API
    - `toggleFavorite(id)` 즐겨찾기 토글
    - `toggleParking(id, spotNumber)` 자리번호 있으면 주차 시작(현재 주차 업데이트), `null`이면 반납

```147:177:/Users/k.j.o/Danpark_final 3/DanparkApp/context/ParkingLotContext.tsx
    const toggleFavorite = (id: string) => {
        setParkingLots(prevLots =>
            prevLots.map(lot => (lot.id === id ? { ...lot, isFavorite: !lot.isFavorite } : lot))
        );
    };

    const toggleParking = (id: string, spotNumber: string | null) => {
        setParkingLots(prevLots =>
            prevLots.map(lot => {
                if (lot.id === id) {
                    if (spotNumber) {
                        const updatedLot = {
                            ...lot,
                            isParking: true,
                            parkingSpotNumber: spotNumber,
                            parkingStartTime: new Date().toISOString(),
                        };
                        setCurrentParking(updatedLot);
                        return updatedLot;
                    }
                    else {
                        setCurrentParking(null);
                        return {
                            ...lot,
                            isParking: false,
                            parkingSpotNumber: undefined,
                            parkingStartTime: undefined,
                        };
                    }
                }
                return lot;
            })
        );
    };
```

- **`ThemeContext`**
  - 모드: 'system' | 'light' | 'dark'
  - `AsyncStorage`로 선택 테마 저장/불러오기
  - `isDark`는 시스템 스킴과 선택 모드 기반 계산

```34:41:/Users/k.j.o/Danpark_final 3/DanparkApp/context/ThemeContext.tsx
    const setTheme = (newTheme: ThemeMode) => {
        setThemeState(newTheme);
        AsyncStorage.setItem('theme', newTheme);
    };

    const isDark = theme === 'system' ? systemColorScheme === 'dark' : theme === 'dark';
```

### 주요 화면/기능
- **스플래시 & 인증**
  - `app/_layout.tsx`: 2.5초 스플래시 후 `isLoggedIn`이 false면 `(auth)` 스택의 `AuthScreen` 표시, 아니면 탭으로 이동
  - 현재 `isLoggedIn`은 로컬 state(목업)
- **홈(탭 `index`) — `MainScreen`**
  - 상단 고정 검색창(`SearchBar`)
  - 지도 영역: 현재는 색상/마커 목업. 필터된 주차장들을 UI 마커로 표시, 터치로 선택
  - 하단시트(BottomSheet): 목록/상세 전환
    - 목록: 검색+정렬(거리/혼잡/빈자리/이름)
    - 항목(`ParkingListItem`): 혼잡 뱃지, 거리, 점유율 프로그레스, 즐겨찾기
    - 상세: `ParkingDetailContent`로 렌더 (참고: 현재 파일 내용이 손상되어 있어 컴파일 이슈 가능)
  - 현재 주차중 배너: 상단에 현재 주차한 자리 번호 표시, 즉시 반납 가능
  - 우측 하단 FAB: 내 위치 버튼(상태에 따라 위치/높이 변경)
- **즐겨찾기(탭 `favorites`) — `FavoritesScreen`**
  - 즐겨찾기만 필터된 목록 + 정렬 모달
  - 항목 선택 시 하단시트로 상세 표시
- **마이페이지(탭 `mypage`) — `MyPageScreen`**
  - 사용자 목업 프로필
  - 메뉴: 주차 기록, 이용 통계, 공지사항, 고객센터, 설정 이동
  - 로그아웃: `(auth)/login`으로 라우팅
- **설정 — `SettingsScreen`**
  - 앱 설정: 알림, 위치, 자동 새로고침, 다크 모드 토글(`ThemeContext` 연동)
  - 계정: 개인정보/비밀번호 변경(플레이스홀더)
  - 지원: 공지/고객센터 라우팅
  - 정보: 이용약관/개인정보처리방침 라우팅, 버전 표시
- **주차 기록 — `ParkingHistoryScreen`**
  - 월간 기록 목업 카드 리스트
- **이용 통계 — `ParkingStatsScreen`**
  - 총/평균 시간, 최다 이용 주차장, 선호 시간대(수평 막대) 등 목업 통계
- **공지사항 — `NoticeScreen`**, **고객센터 — `SupportScreen`**
  - 각각 카드/리스트로 정적 목업 콘텐츠
- **주차장 상세 다이어그램 모달 — `ParkingLotDiagramModal`**
  - 상세 화면에서 호출되는 도면 모달(컴포넌트 존재, 상세 구현은 코드 참조 필요)
- **기타**
  - `ParkingListItem`에서 현재 주차중이면 상태/자리번호 UI를 다르게 표시
  - `SortFilterModal`로 정렬 선택(모달 닫힘/체크 UI 포함)

### 내비게이션/헤더 UX
- 루트 스택은 커스텀 뒤로가기(아이오닉스 아이콘)와 iOS 백 타이틀 제거
- 탭 바 아이콘: 홈(home), 즐겨찾기(star), 마이페이지(person-circle)
- 스택 화면은 필요 시 헤더 표시/커스텀 백 버튼 사용

### 실행/개발 명령
- **개발 서버**: `npm run start` 또는 `npx expo start`
- **플랫폼별 실행**: `npm run ios` / `npm run android` / `npm run web`
- **린트**: `npm run lint`
- **프로젝트 리셋 스크립트**: `npm run reset-project`

### 자산/브랜딩
- 아이콘/스플래시/파비콘 경로 구성됨(`assets/images/*`)
- Android adaptive icon(배경/전경/모노크롬) 지정
- 웹 출력: `web.output = "static"`

### 기술 메모/주의사항
- **지도**: `react-native-maps`가 의존성에 있으나, 메인 화면은 현재 목업 지도 UI 사용(실제 지도로 교체 가능).
- **상세 컴포넌트 손상**: `components/ParkingDetailContent.tsx` 파일 내용이 비정상(“게;”)이라 상세 화면 렌더 시 빌드 에러 가능. 복구/구현 필요.
- **인증 상태**: `isLoggedIn`은 로컬 상태 목업으로, 실제 인증 연동 시 컨텍스트/보안 저장소 연계 필요.
- **New Architecture**: `newArchEnabled: true`이므로 네이티브 모듈/빌드 환경 호환성 확인 권장.
- **Reanimated 플러그인**: Babel 플러그인 등록 완료(필수 요건 충족).

---

- 앱 구조/초기 라우팅
```21:44:/Users/k.j.o/Danpark_final 3/DanparkApp/app/_layout.tsx
export default function RootLayout() {
    const [isLoading, setIsLoading] = useState(true);
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    useEffect(() => {
        const timer = setTimeout(() => setIsLoading(false), 2500);
        return () => clearTimeout(timer);
    }, []);
    if (isLoading) {
        return <SplashScreen onFinish={() => setIsLoading(false)} />;
    }
    if (!isLoggedIn) {
        return (
            <Stack screenOptions={{ headerShown: false }}>
                <Stack.Screen name="(auth)" options={{ headerShown: false }} />
            </Stack>
        );
    }
    return <TabLayout />;
}
```

### 요약
- **환경**: Expo 54 + RN 0.81 + React 19, Expo Router, Reanimated/BottomSheet, TS Strict, ESLint 세팅 완료.
- **구조**: `(auth)`/`(tabs)` 세그먼트와 독립 스택 화면으로 라우팅 구성, 전역 `Theme`/`ParkingLot` 컨텍스트 주입.
- **기능**: 검색·정렬·즐겨찾기·하단시트 상세·주차 상태 목업, 마이페이지/설정/공지/고객센터/기록/통계 포함.
- **주의**: `ParkingDetailContent.tsx` 손상으로 상세 렌더링 에러 가능; 지도는 현재 목업 UI.


